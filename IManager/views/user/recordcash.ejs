
<head>
    
</head>


<!-- start page title -->
<div class="row">
    <div class="col-12">
        <div class="page-title-box">
            <div class="page-title-right">
                <ol class="breadcrumb m-0">
                    <li class="breadcrumb-item"><a href="javascript: void(0);">회원 관리</a></li>
                    <li class="breadcrumb-item active">회원 캐쉬내역</li>
                </ol>
            </div>
            <h4 class="page-title">회원 캐쉬내역</h4>
        </div>
    </div>
</div>
<!-- end page title -->

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <div class="row mb-2">

                    <div class="form-row  align-items-center">
                        <div class="col-auto">
                            <label class="col-form-label">검색일자</label>
                        </div>
                        <div class="col-auto">
                            <label class="sr-only">시작</label>
                            <input type="text" class="form-control mb-2" id="dateStart" data-provide="datepicker" placeholder="시작일">
                        </div>
                        <div class="col-auto">
                            <label class="sr-only">종료</label>
                            <input type="text" class="form-control mb-2" id="dateEnd" data-provide="datepicker" placeholder="종료일">
                        </div>
                        <div class="col-auto">
                            <button type="button" class="btn btn-primary mb-2" id="FindButton">검색</button>
                        </div>
                    </div>
                    <div class="col-sm-7">
                        <div class="text-sm-right">
                            <!--
                            <button type="button" class="btn btn-success mb-2 mr-1"><i class="mdi mdi-settings"></i></button>
                            <button type="button" class="btn btn-light mb-2">Export</button>
                                -->
                        </div>
                    </div><!-- end col-->
                </div>

                <div class="table-responsive">
                    <table id="user-datatable" class="table table-sm table-hover dt-responsive nowrap w-100">
                        <thead>
                            <tr>
                                <th>색인</th>
                                <th>아이디</th>
                                <th>닉네임</th>
                                <th>입금 금액</th>
                                <th>출금 금액</th>
                                <th>보유 금액</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div> <!-- end card-body-->
        </div> <!-- end card-->
    </div> <!-- end col -->

    <div class="modal fade task-modal-content" id="BuildAgentDialog" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="NewTaskModalLabel">캐쉬 기록</h4>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-hidden="true">×</button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="id" id="uid" value="" />
                    <div class="form-group">
                        <label id="record_userid"></label>
                        <div class="row">
                            <table class="table">
                                <thead>
                                    <tr>
                                    <th scope="col">색인</th>
                                    <th scope="col">구분</th>
                                    <th scope="col">금액</th>
                                    <th scope="col">날짜</th>
                                    </tr>
                                </thead>
                                <tbody id="recordlist">
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="text-right">
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal">취소</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript" src="js/time.js"></script>
<script type="text/javascript">

    var dataTableInstance;

    let GetTypeColor = (eType) => {
        if ( eType == 'INPUT' )
        {
            return 'blue';
        }
        return 'red';
    }

    $(document).ready(function(){

        $("#dateStart").datepicker({
            format: 'yyyy-mm-dd',
            language : 'kr'
        });
        $("#dateEnd").datepicker({
            format: 'yyyy-mm-dd',
            language: 'kr'
        });

        $("#dateStart").val(getTimeStamp(0));
        $("#dateEnd").val(getTimeStamp(0));

        // 새 계정 생성
        $(".CreateUserButton").click(function (e) {
            e.preventDefault();

            clearForm();
            $("#UserEditDialog").modal("show");
        });

        $(document).on("click", ".UserIdPopup", function (e) {
            e.preventDefault();

            const cstrID = $(this).attr("data-id");

            $.ajax({
                url:"/user/request_recordcashuser",
                type:"POST",
                data: {
                    strID : $(this).attr("data-id"),
                    dateStart:$('#dateStart').val(),
                    dateEnd:$('#dateEnd').val()
                },
                dataType: "json",
                success: function (obj) {
                    if (obj.result == "OK") {

                        console.log(obj.data);

                        $('#record_userid').text(`아이디 : ${cstrID} ( ${$('#dateStart').val()} ~ ${$('#dateEnd').val()} )`);

                        $('#recordlist').empty();
                        

                        for ( let i in obj.data )
                        {
                            let tag = `
                            <tr>
                                <th>${obj.data[i].id}</th>
                                <td style='color:${GetTypeColor(obj.data[i].eType)}'>${obj.data[i].eType}</td>
                                <td>${obj.data[i].iAmount.toLocaleString()}</td>
                                <td>${obj.data[i].createdAt}</td>
                            </tr>
                            `;

                            $('#recordlist').append(tag);
                        }

                        $("#BuildAgentDialog").modal("show");

                    } else {
                        alert(obj.reason);
                    }
                }, error: function () {
                    alert("조회 중 오류 발생");
                }
            });
        });

        // 사용자 구분
        $("input[name='UserTypeFilter']").change(function () {
            dataTableInstance.ajax.reload();
        });

        $("#SearchTextFindButton").click(function (e) {
            e.preventDefault();

            dataTableInstance.ajax.reload();
        });

        $("#FindButton").click(function (e) {
            e.preventDefault();

            dataTableInstance.ajax.reload();
        });

        // // 정보 수정 완료
        // $("#UserFormSubmitButton").click(function (e) {
        //     e.preventDefault();

        //     $("#UserForm").ajaxSubmit({
        //         //url:"/account/user",
        //         dataType: "json",
        //         type : "POST",
        //         beforeSubmit: function () {

        //         },
        //         success: function (obj) {
        //             if (obj.result == "OK") {
        //                 $("#UserEditDialog").modal("hide");
        //                 dataTableInstance.ajax.reload();
        //                 return;
        //             }
        //             alert(obj.reason);
        //         },
        //         error: function () {
        //             alert("서버 오류");
        //         }
        //     });
        // });

        dataTableInstance = $('#user-datatable').DataTable({
            "serverSide": true,
            "searching": false,
            "ajax": {
                url:"/user/request_recordcash",
                "type": "POST",
                "data": function (d) {
                    return $.extend({}, d, {
                        // "userTypeFilter": $("input[name='UserTypeFilter']:checked").val(),
                        // "search" : $("#searchText").val(),
                        //"iClass" : 1,
                        dateStart:$('#dateStart').val(),
                        dateEnd:$('#dateEnd').val()
                    });
                }
            },
            responsive : true,
            order: [[ 1, 'asc' ]],
            columns: [

                {
                    data: "id",
                    render: function (d, t) {
                        return d;// return "<input type='checkbox' name='chk' id='chk" + d + "' value='" + d + "' /><label for='chk" + d + "'>" + d + "</label>";
                    }
                },
                {
                    data: "strID",
                    render: function (d) {
                        return "<a href='#' class='UserIdPopup' data-id='" + d + "'>" + d + "</a>";
                    }
                },
                {
                    data: "strNickname"
                },
                { 
                    data: "iInput", render: function (d) {
                        let c = parseInt(d);
                        return c.toLocaleString();
                    }
                },
                { 
                    data: "iOutput", render: function (d) {
                        let c = parseInt(d);
                        return c.toLocaleString();
                    }
                },
                { 
                    data: "iCash", render: function (d) {
                        let c = parseInt(d);
                        return c.toLocaleString();
                    }
                },
            ],
            keys: true,
            "language": {
                "paginate": {
                    "previous": "<i class='mdi mdi-chevron-left'>",
                    "next": "<i class='mdi mdi-chevron-right'>"
                },
                "info": "현재 페이지 _PAGE_/_PAGES_, 총 _TOTAL_ 건",
                "lengthMenu": "한 페이지 길이 _MENU_",
                "emptyTable": "조건에 맞는 데이터가 없습니다",
                "infoEmpty" : "표시할 데이터 없음"
            },
            "sort": false,
            "drawCallback": function () {
                $('.dataTables_paginate > .pagination').addClass('pagination-rounded');
            },
            createdRow: function (row, data) {
                $(row).attr("data-id", data.id);
                $(row).attr("data-loginId", data.strID);
                // if (data.eStatus == "QUIT")
                //     $(row).addClass("table-dark");

                if ( data.iClass == 1 )
                {
                    $(row).attr('style', 'background-color:#f0f0f0;')
                }
                else if ( data.iClass == 2 )
                {
                    $(row).attr('style', 'background-color:#fcfcac;')                    
                }
                else if ( data.iClass == 3 )
                {
                    $(row).attr('style', 'background-color:#f9d9f9;')                    
                }
                else if ( data.iClass == 4 )
                {
                    $(row).attr('style', 'background-color:#a0f0f0;')                    
                }
            }
        });
    });

    let BuildAgent = (iClass) => {

        console.log(iClass);

        $('#BuildAgentDialog').modal('show');

        $('#iClass').val(iClass);
    }

    let RequestCheckID = () => {

        const strID = $('#strID').val();

        $.ajax({
            url:"/agent/request_checkid",
            type:"POST",
            data: {
                strID :strID
            },
            dataType: "json",
            success: function (obj) {
                if ( obj.result == 'OK' )
                {
                    alert('사용 가능한 아이디 입니다.');
                }
                else
                {
                    alert('이미 사용중인 아이디 입니다.');
                }
            }, 
            error: function () {
                alert("조회 중 오류 발생");
            }
        });
    }

    let RequestCheckNickname = () => {

        const strNickname = $('#strNickname').val();

        $.ajax({
            url:"/agent/request_checknickname",
            type:"POST",
            data: {
                strNickname :strNickname
            },
            dataType: "json",
            success: function (obj) {
                if ( obj.result == 'OK' )
                {
                    alert('사용 가능한 닉네임 입니다.');
                }
                else
                {
                    alert('이미 사용중인 닉네임 입니다.');
                }
            }, 
            error: function () {
                alert("조회 중 오류 발생");
            }
        });
    }

    let RequestRegister = () => {
        
        const strID = $('#strID').val();
        const strNickname = $('#strNickname').val();
        const iClass = $('#iClass').val();
        const strParentID = $('#strParentID').val();
        const strPassword = $('#strPassword').val();
        const fSettle = $('#fSettle').val();
        const fHoldemR = $('#fHoldemR').val();
        const iPoint = $('#iPoint').val();
        const iCash = $('#iCash').val();

        $.ajax({
            url:"/agent/request_register",
            type:"POST",
            data: {
                strID:strID,
                iClass:iClass,
                strNickname :strNickname,
                strParentID:strParentID,
                strPassword:strPassword,
                fSettle:fSettle,
                fHoldemR:fHoldemR,
                iPoint:iPoint,
                iCash:iCash,
            },
            dataType: "json",
            success: function (obj) {
                console.log(obj);

                if ( obj.result == 'OK' )
                {
                    alert('완료 되었습니다.');
                    location.reload();
                }
                else
                {
                    if ( obj.error == 'NotExistParent' )
                    {
                        alert('상위 에이전트가 존재 하지 않습니다.');
                    }
                    else if ( obj.error == 'ExistNickname' )
                    {
                        alert('이미 사용중인 닉네임 입니다.');
                    }
                }
            }, 
            error: function () {
                alert("조회 중 오류 발생");
            }
        });
    }

</script>
